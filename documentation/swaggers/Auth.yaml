# this is an example of the Uber API
# as a demonstration of an API spec in YAML
# java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i /Users/ibsonrgmachado/Projects/Allwissend/documentation/swaggers/Auth.yaml -l aspnetcore -o /Users/ibsonrgmachado/Projects/Allwissend/microservices/aspnetcore/auth -c /Users/ibsonrgmachado/Projects/Allwissend/documentation/swaggers/Auth.config.json

swagger: '2.0'
info:
  title: Allwissend Microservices API
  description: Allwissend Auth API
  version: "1.0.0"

# the domain of the service

host: auth.application.dev

# array of all schemes that your API supports
schemes:
  - http
  - https

security:
  - internalApiKey: []

# will be prefixed to all paths
basePath: /v1

produces:
  - application/json
  - application/jwt

parameters:
  userUuid:
    in: path
    name: userUuid
    description: Unique identifier representing a specific organization that needs to be fetched
    required: true
    type: string
    format: uuid

paths:
  /auth/login:
    post:
      summary: Authenticate a user against the server/database
      description: |
        The endpoint save a new *Organization*.
      tags:
        - LoginCommand
      operationId: doLogin
      produces:
        - application/jwt
        - application/json
      parameters:
        - in: body
          name: body
          description: User to be authenticate
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/JWTokenEncoded'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

  /auth/reset:
    post:
      summary: Authenticate a user against the server/database
      description: |
        The endpoint save a new *Organization*.
      tags:
        - LoginCommand
      operationId: resetPassword
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User to be authenticate
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        202:
          description: Accepted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

  /auth/user:
    get:
      summary: Get a specific *User*
      description: |
        The endpoint to update a *User*.
      tags:
        - UserQuery
      operationId: listUser
      produces:
        - application/json
      security:
        - internalApiKey: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

    post:
      summary: Create a new user
      description: |
        The endpoint save a new *User*.
      tags:
        - UserCommand
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User to be created
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        202:
          description: Accepted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

  /auth/user/{userUuid}:
    get:
      summary: Get a specific *User*
      description: |
        The endpoint to update a *User*.
      tags:
        - UserQuery
      operationId: getUser
      produces:
        - application/json
      security:
        - internalApiKey: []
      parameters:
        - $ref: '#/parameters/userUuid'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

    put:
      summary: Authenticate a user against the server/database
      description: |
        The endpoint to update a *User*.
      tags:
        - UserCommand
      operationId: updateUser
      produces:
        - application/json
      security:
        - internalApiKey: []
      parameters:
        - $ref: '#/parameters/userUuid'
        - in: body
          name: body
          description: User to be updated
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        202:
          description: Accepted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete a *User* by his uuid
      description: |
        The endpoint to update a *User*.
      tags:
        - UserCommand
      operationId: deleteUser
      produces:
        - application/json
      security:
        - internalApiKey: []
      parameters:
        - $ref: '#/parameters/userUuid'
      responses:
        202:
          description: Accepted
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        402:
          description: Payment Required
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbiden
          schema:
            $ref: '#/definitions/Error'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        504:
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/Error'


definitions:
  Period:
    type: object
    description: Time period when contact was/is in use. Allows contact to be placed in historical context.
    properties:
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time

  User:
    type: object
    required:
      - user
    properties:
      uuid:
        type: string
        format: uuid
        description: Unique identifier representing a specific user.
      user:
        type: string
        description: The user name to authenticate
      password:
        type: string
        description: Password of user
      passwordConfirmation:
        type: string
        description: Password of user

  # ver mais em https://www.iana.org/assignments/jwt/jwt.xhtml
  JWToken:
    type: object
    description: Time period when contact was/is in use. Allows contact to be placed in historical context.
    properties:
      iss:
        type: string
        description: Issuer
      sub:
        type: string
        description: Subject
      aud:
        type: string
        description: Audience
      exp:
        type: string
        description: Expiration Time
      nbf:
        type: string
        description: Not Before
      iat:
        type: string
        description: Issued At
      jti:
        type: string
        description: JWT ID
      uuid:
        type: string
        format: uuid
        description: Unique identifier representing a specific user.
      name:
        type: string
        description: Full name
      given_name:
        type: string
        description: Given name(s) or first name(s)
      nickname:
        type: string
        description: Casual name
      email:
        type: string
        description: Preferred e-mail address
      email_verified:
        type: boolean
        description: True if the e-mail address has been verified; otherwise false
      zoneinfo:
        type: string
        description: Time zone
      locale:
        type: string
        description: Locale
      cnf:
        type: string
        description: Confirmation
      orig:
        type: string
        description: Originating Identity String
      dest:
        type: string
        description: Destination Identity String
      mky:
        type: string
        description: Media Key Fingerprint String

  JWTokenEncoded:
    type: string
    description: Encoded JSON Web Token (JWT)

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

securityDefinitions:
  internalApiKey:
    type: apiKey
    in: header
    name: token

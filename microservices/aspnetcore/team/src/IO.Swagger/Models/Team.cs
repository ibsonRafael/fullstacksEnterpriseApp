/*
 * Allwissend Microservices API
 *
 * Allwissend Team API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Team?!
    /// </summary>
    [DataContract]
    public partial class Team : IEquatable<Team>
    { 
        /// <summary>
        /// Unique identifier representing a specific Team in a Organization
        /// </summary>
        /// <value>Unique identifier representing a specific Team in a Organization</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }

        /// <summary>
        /// Code thats identifier the Team in human friendly format
        /// </summary>
        /// <value>Code thats identifier the Team in human friendly format</value>
        [DataMember(Name="code")]
        public string Code { get; set; }
        /// <summary>
        /// Status...
        /// </summary>
        /// <value>Status...</value>
        public enum StatusEnum
        { 
            /// <summary>
            /// Enum WorkingEnum for working
            /// </summary>
            [EnumMember(Value = "working")]
            WorkingEnum = 1,
            
            /// <summary>
            /// Enum StoppedEnum for stopped
            /// </summary>
            [EnumMember(Value = "stopped")]
            StoppedEnum = 2,
            
            /// <summary>
            /// Enum LossEnum for loss
            /// </summary>
            [EnumMember(Value = "loss")]
            LossEnum = 3
        }

        /// <summary>
        /// Status...
        /// </summary>
        /// <value>Status...</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Team name.
        /// </summary>
        /// <value>Team name.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLocation
        /// </summary>
        [DataMember(Name="defaultLocation")]
        public Location DefaultLocation { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLocation
        /// </summary>
        [DataMember(Name="currentLocation")]
        public Location CurrentLocation { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members")]
        public List<Member> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DefaultLocation: ").Append(DefaultLocation).Append("\n");
            sb.Append("  CurrentLocation: ").Append(CurrentLocation).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Team)obj);
        }

        /// <summary>
        /// Returns true if Team instances are equal
        /// </summary>
        /// <param name="other">Instance of Team to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Team other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DefaultLocation == other.DefaultLocation ||
                    DefaultLocation != null &&
                    DefaultLocation.Equals(other.DefaultLocation)
                ) && 
                (
                    CurrentLocation == other.CurrentLocation ||
                    CurrentLocation != null &&
                    CurrentLocation.Equals(other.CurrentLocation)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    Members.SequenceEqual(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DefaultLocation != null)
                    hashCode = hashCode * 59 + DefaultLocation.GetHashCode();
                    if (CurrentLocation != null)
                    hashCode = hashCode * 59 + CurrentLocation.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Team left, Team right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Team left, Team right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

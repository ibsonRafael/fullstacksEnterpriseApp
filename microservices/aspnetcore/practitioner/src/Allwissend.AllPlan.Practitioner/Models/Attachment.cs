/*
 * Allwissend Microservices API
 *
 * Allwissend Practitioner API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Allwissend.AllPlan.Practitioner.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Attachment : IEquatable<Attachment>
    { 
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }

        /// <summary>
        /// Additional Content defined by implementations
        /// </summary>
        /// <value>Additional Content defined by implementations</value>
        [DataMember(Name="extension")]
        public string Extension { get; set; }

        /// <summary>
        /// Mime type of the content, with charset etc.
        /// </summary>
        /// <value>Mime type of the content, with charset etc.</value>
        [DataMember(Name="contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Human language of the content (BCP-47)
        /// </summary>
        /// <value>Human language of the content (BCP-47)</value>
        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Data inline, base64ed
        /// </summary>
        /// <value>Data inline, base64ed</value>
        [DataMember(Name="data")]
        public string Data { get; set; }

        /// <summary>
        /// Uri where the data can be found
        /// </summary>
        /// <value>Uri where the data can be found</value>
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Number of bytes of content (if url provided)
        /// </summary>
        /// <value>Number of bytes of content (if url provided)</value>
        [DataMember(Name="size")]
        public int? Size { get; set; }

        /// <summary>
        /// Hash of the data (sha-1, base64ed)
        /// </summary>
        /// <value>Hash of the data (sha-1, base64ed)</value>
        [DataMember(Name="hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Label to display in place of the data
        /// </summary>
        /// <value>Label to display in place of the data</value>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Date attachment was first created
        /// </summary>
        /// <value>Date attachment was first created</value>
        [DataMember(Name="creation")]
        public string Creation { get; set; }

        /// <summary>
        /// Date attachment was last updated
        /// </summary>
        /// <value>Date attachment was last updated</value>
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Attachment)obj);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="other">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Extension == other.Extension ||
                    Extension != null &&
                    Extension.Equals(other.Extension)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Hash == other.Hash ||
                    Hash != null &&
                    Hash.Equals(other.Hash)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Creation == other.Creation ||
                    Creation != null &&
                    Creation.Equals(other.Creation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Extension != null)
                    hashCode = hashCode * 59 + Extension.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Hash != null)
                    hashCode = hashCode * 59 + Hash.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Creation != null)
                    hashCode = hashCode * 59 + Creation.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Attachment left, Attachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Attachment left, Attachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Allwissend Microservices API
 *
 * Allwissend Practitioner API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Allwissend.AllPlan.Practitioner.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Cost : IEquatable<Cost>
    { 
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }
        /// <summary>
        /// The status (active | suspended | inactive) property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
        /// </summary>
        /// <value>The status (active | suspended | inactive) property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.</value>
        public enum StatusEnum
        { 
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum SuspendedEnum for suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            SuspendedEnum = 2,
            
            /// <summary>
            /// Enum InactiveEnum for inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            InactiveEnum = 3
        }

        /// <summary>
        /// The status (active | suspended | inactive) property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
        /// </summary>
        /// <value>The status (active | suspended | inactive) property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.</value>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Valued Item fee, charge, or cost
        /// </summary>
        /// <value>Valued Item fee, charge, or cost</value>
        [DataMember(Name="hourPrice")]
        public double? HourPrice { get; set; }

        /// <summary>
        /// Valued Item fee, charge, or cost
        /// </summary>
        /// <value>Valued Item fee, charge, or cost</value>
        [DataMember(Name="usePrice")]
        public double? UsePrice { get; set; }

        /// <summary>
        /// USD, BRL, BTC, ETH
        /// </summary>
        /// <value>USD, BRL, BTC, ETH</value>
        [DataMember(Name="unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period")]
        public CostPeriod Period { get; set; }

        /// <summary>
        /// Date address was first created
        /// </summary>
        /// <value>Date address was first created</value>
        [DataMember(Name="creation")]
        public string Creation { get; set; }

        /// <summary>
        /// Date address was last updated
        /// </summary>
        /// <value>Date address was last updated</value>
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cost {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HourPrice: ").Append(HourPrice).Append("\n");
            sb.Append("  UsePrice: ").Append(UsePrice).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cost)obj);
        }

        /// <summary>
        /// Returns true if Cost instances are equal
        /// </summary>
        /// <param name="other">Instance of Cost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cost other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    HourPrice == other.HourPrice ||
                    HourPrice != null &&
                    HourPrice.Equals(other.HourPrice)
                ) && 
                (
                    UsePrice == other.UsePrice ||
                    UsePrice != null &&
                    UsePrice.Equals(other.UsePrice)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    Creation == other.Creation ||
                    Creation != null &&
                    Creation.Equals(other.Creation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (HourPrice != null)
                    hashCode = hashCode * 59 + HourPrice.GetHashCode();
                    if (UsePrice != null)
                    hashCode = hashCode * 59 + UsePrice.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Creation != null)
                    hashCode = hashCode * 59 + Creation.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cost left, Cost right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cost left, Cost right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

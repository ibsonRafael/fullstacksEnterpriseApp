/*
 * Allwissend Microservices API
 *
 * Allwissend Practitioner API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Allwissend.AllPlan.Practitioner.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Practitioner : IEquatable<Practitioner>
    { 
        /// <summary>
        /// Unique identifier representing a specific practitioner.
        /// </summary>
        /// <value>Unique identifier representing a specific practitioner.</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }

        /// <summary>
        /// To do
        /// </summary>
        /// <value>To do</value>
        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address")]
        public List<Address> Address { get; set; }

        /// <summary>
        /// Gets or Sets Qualification
        /// </summary>
        [DataMember(Name="qualification")]
        public List<Qualification> Qualification { get; set; }

        /// <summary>
        /// Gets or Sets Telecom
        /// </summary>
        [DataMember(Name="telecom")]
        public List<ContactPoint> Telecom { get; set; }

        /// <summary>
        /// Gets or Sets Photo
        /// </summary>
        [DataMember(Name="photo")]
        public List<Attachment> Photo { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost")]
        public List<Cost> Cost { get; set; }

        /// <summary>
        /// Date practitioner was first created
        /// </summary>
        /// <value>Date practitioner was first created</value>
        [DataMember(Name="creation")]
        public string Creation { get; set; }

        /// <summary>
        /// Date practitioner was last updated
        /// </summary>
        /// <value>Date practitioner was last updated</value>
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Practitioner {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Qualification: ").Append(Qualification).Append("\n");
            sb.Append("  Telecom: ").Append(Telecom).Append("\n");
            sb.Append("  Photo: ").Append(Photo).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Practitioner)obj);
        }

        /// <summary>
        /// Returns true if Practitioner instances are equal
        /// </summary>
        /// <param name="other">Instance of Practitioner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Practitioner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    BirthDate == other.BirthDate ||
                    BirthDate != null &&
                    BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.SequenceEqual(other.Address)
                ) && 
                (
                    Qualification == other.Qualification ||
                    Qualification != null &&
                    Qualification.SequenceEqual(other.Qualification)
                ) && 
                (
                    Telecom == other.Telecom ||
                    Telecom != null &&
                    Telecom.SequenceEqual(other.Telecom)
                ) && 
                (
                    Photo == other.Photo ||
                    Photo != null &&
                    Photo.SequenceEqual(other.Photo)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.SequenceEqual(other.Cost)
                ) && 
                (
                    Creation == other.Creation ||
                    Creation != null &&
                    Creation.Equals(other.Creation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Qualification != null)
                    hashCode = hashCode * 59 + Qualification.GetHashCode();
                    if (Telecom != null)
                    hashCode = hashCode * 59 + Telecom.GetHashCode();
                    if (Photo != null)
                    hashCode = hashCode * 59 + Photo.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (Creation != null)
                    hashCode = hashCode * 59 + Creation.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Practitioner left, Practitioner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Practitioner left, Practitioner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

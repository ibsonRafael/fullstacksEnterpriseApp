/*
 * Allwissend Microservices API
 *
 * Allwissend Practitioner API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Allwissend.AllPlan.Practitioner.Models
{ 
    /// <summary>
    /// Base Structure Definition for Address Type. Allows to be record postal addresses, along with notes about their use. An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
    /// </summary>
    [DataContract]
    public partial class Address : IEquatable<Address>
    { 
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }
        /// <summary>
        /// The purpose (home | work | temp | old) of this address. This is labeled as *Is Modifier* because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.
        /// </summary>
        /// <value>The purpose (home | work | temp | old) of this address. This is labeled as *Is Modifier* because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.</value>
        public enum UseEnum
        { 
            /// <summary>
            /// Enum HomeEnum for home
            /// </summary>
            [EnumMember(Value = "home")]
            HomeEnum = 1,
            
            /// <summary>
            /// Enum WorkEnum for work
            /// </summary>
            [EnumMember(Value = "work")]
            WorkEnum = 2,
            
            /// <summary>
            /// Enum TempEnum for temp
            /// </summary>
            [EnumMember(Value = "temp")]
            TempEnum = 3,
            
            /// <summary>
            /// Enum OldEnum for old
            /// </summary>
            [EnumMember(Value = "old")]
            OldEnum = 4
        }

        /// <summary>
        /// The purpose (home | work | temp | old) of this address. This is labeled as *Is Modifier* because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.
        /// </summary>
        /// <value>The purpose (home | work | temp | old) of this address. This is labeled as *Is Modifier* because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.</value>
        [DataMember(Name="use")]
        public UseEnum? Use { get; set; }
        /// <summary>
        /// Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
        /// </summary>
        /// <value>Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.</value>
        public enum TypeEnum
        { 
            /// <summary>
            /// Enum PostalEnum for postal
            /// </summary>
            [EnumMember(Value = "postal")]
            PostalEnum = 1,
            
            /// <summary>
            /// Enum PhysicalEnum for physical
            /// </summary>
            [EnumMember(Value = "physical")]
            PhysicalEnum = 2,
            
            /// <summary>
            /// Enum BothEnum for both
            /// </summary>
            [EnumMember(Value = "both")]
            BothEnum = 3
        }

        /// <summary>
        /// Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
        /// </summary>
        /// <value>Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.</value>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
        /// </summary>
        /// <value>This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.</value>
        [DataMember(Name="line")]
        public List<string> Line { get; set; }

        /// <summary>
        /// The name of the city, town, village or other community or delivery center.
        /// </summary>
        /// <value>The name of the city, town, village or other community or delivery center.</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// District is sometimes known as county, but in some regions &#39;county&#39; is used in place of city (municipality), so county name should be conveyed in city instead.
        /// </summary>
        /// <value>District is sometimes known as county, but in some regions &#39;county&#39; is used in place of city (municipality), so county name should be conveyed in city instead.</value>
        [DataMember(Name="district")]
        public string District { get; set; }

        /// <summary>
        /// Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
        /// </summary>
        /// <value>Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).</value>
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Country - a nation as commonly understood or generally accepted.
        /// </summary>
        /// <value>Country - a nation as commonly understood or generally accepted.</value>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// A postal code designating a region defined by the postal service.
        /// </summary>
        /// <value>A postal code designating a region defined by the postal service.</value>
        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period")]
        public AddressPeriod Period { get; set; }

        /// <summary>
        /// Date address was first created
        /// </summary>
        /// <value>Date address was first created</value>
        [DataMember(Name="creation")]
        public string Creation { get; set; }

        /// <summary>
        /// Date address was last updated
        /// </summary>
        /// <value>Date address was last updated</value>
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Address)obj);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Use == other.Use ||
                    Use != null &&
                    Use.Equals(other.Use)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Line == other.Line ||
                    Line != null &&
                    Line.SequenceEqual(other.Line)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    Creation == other.Creation ||
                    Creation != null &&
                    Creation.Equals(other.Creation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Use != null)
                    hashCode = hashCode * 59 + Use.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Line != null)
                    hashCode = hashCode * 59 + Line.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Creation != null)
                    hashCode = hashCode * 59 + Creation.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Address left, Address right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Address left, Address right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Allwissend Microservices API
 *
 * Allwissend Practitioner API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Allwissend.AllPlan.Practitioner.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactPoint : IEquatable<ContactPoint>
    { 
        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name="uuid")]
        public Guid? Uuid { get; set; }
        /// <summary>
        /// Telecommunications form for contact point - what communications system is required to make use of the contact.
        /// </summary>
        /// <value>Telecommunications form for contact point - what communications system is required to make use of the contact.</value>
        public enum SystemEnum
        { 
            /// <summary>
            /// Enum PhoneEnum for phone
            /// </summary>
            [EnumMember(Value = "phone")]
            PhoneEnum = 1,
            
            /// <summary>
            /// Enum FaxEnum for fax
            /// </summary>
            [EnumMember(Value = "fax")]
            FaxEnum = 2,
            
            /// <summary>
            /// Enum EmailEnum for email
            /// </summary>
            [EnumMember(Value = "email")]
            EmailEnum = 3,
            
            /// <summary>
            /// Enum PagerEnum for pager
            /// </summary>
            [EnumMember(Value = "pager")]
            PagerEnum = 4,
            
            /// <summary>
            /// Enum UrlEnum for url
            /// </summary>
            [EnumMember(Value = "url")]
            UrlEnum = 5,
            
            /// <summary>
            /// Enum SmsEnum for sms
            /// </summary>
            [EnumMember(Value = "sms")]
            SmsEnum = 6,
            
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 7
        }

        /// <summary>
        /// Telecommunications form for contact point - what communications system is required to make use of the contact.
        /// </summary>
        /// <value>Telecommunications form for contact point - what communications system is required to make use of the contact.</value>
        [DataMember(Name="system")]
        public SystemEnum? System { get; set; }

        /// <summary>
        /// The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
        /// </summary>
        /// <value>The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).</value>
        [DataMember(Name="value")]
        public string Value { get; set; }
        /// <summary>
        /// Identifies the purpose for the contact point. This is labeled as *Is Modifier* because applications should not mistake a temporary or old contact etc. for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
        /// </summary>
        /// <value>Identifies the purpose for the contact point. This is labeled as *Is Modifier* because applications should not mistake a temporary or old contact etc. for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.</value>
        public enum UseEnum
        { 
            /// <summary>
            /// Enum HomeEnum for home
            /// </summary>
            [EnumMember(Value = "home")]
            HomeEnum = 1,
            
            /// <summary>
            /// Enum WorkEnum for work
            /// </summary>
            [EnumMember(Value = "work")]
            WorkEnum = 2,
            
            /// <summary>
            /// Enum TempEnum for temp
            /// </summary>
            [EnumMember(Value = "temp")]
            TempEnum = 3,
            
            /// <summary>
            /// Enum OldEnum for old
            /// </summary>
            [EnumMember(Value = "old")]
            OldEnum = 4,
            
            /// <summary>
            /// Enum MobileEnum for mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            MobileEnum = 5
        }

        /// <summary>
        /// Identifies the purpose for the contact point. This is labeled as *Is Modifier* because applications should not mistake a temporary or old contact etc. for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
        /// </summary>
        /// <value>Identifies the purpose for the contact point. This is labeled as *Is Modifier* because applications should not mistake a temporary or old contact etc. for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.</value>
        [DataMember(Name="use")]
        public UseEnum? Use { get; set; }

        /// <summary>
        /// Specify preferred order of use (1 &#x3D; highest). Contacts are ranked with lower values coming before higher values.
        /// </summary>
        /// <value>Specify preferred order of use (1 &#x3D; highest). Contacts are ranked with lower values coming before higher values.</value>
        [DataMember(Name="rank")]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period")]
        public ContactPointPeriod Period { get; set; }

        /// <summary>
        /// Date telecom was first created
        /// </summary>
        /// <value>Date telecom was first created</value>
        [DataMember(Name="creation")]
        public string Creation { get; set; }

        /// <summary>
        /// Date telecom was last updated
        /// </summary>
        /// <value>Date telecom was last updated</value>
        [DataMember(Name="lastUpdated")]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactPoint {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Creation: ").Append(Creation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactPoint)obj);
        }

        /// <summary>
        /// Returns true if ContactPoint instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactPoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    System == other.System ||
                    System != null &&
                    System.Equals(other.System)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Use == other.Use ||
                    Use != null &&
                    Use.Equals(other.Use)
                ) && 
                (
                    Rank == other.Rank ||
                    Rank != null &&
                    Rank.Equals(other.Rank)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    Creation == other.Creation ||
                    Creation != null &&
                    Creation.Equals(other.Creation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (System != null)
                    hashCode = hashCode * 59 + System.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Use != null)
                    hashCode = hashCode * 59 + Use.GetHashCode();
                    if (Rank != null)
                    hashCode = hashCode * 59 + Rank.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Creation != null)
                    hashCode = hashCode * 59 + Creation.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactPoint left, ContactPoint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactPoint left, ContactPoint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
